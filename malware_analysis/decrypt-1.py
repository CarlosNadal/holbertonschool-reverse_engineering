import base64

def decrypt_string(encrypted_data, key):
    # Fix base64 URL-safe characters and add padding
    encrypted_data = encrypted_data.replace('_', '/').replace('-', '+')
    encrypted_data = encrypted_data + '=' * (4 - len(encrypted_data) % 4)  # Add padding if necessary
    
    try:
        # Decode base64
        encrypted_data_bytes = base64.b64decode(encrypted_data)
    except Exception as e:
        print(f"Error in base64 decoding: {e}")
        return ""
    
    # Extract IV and actual encrypted data (assuming IV is the first 16 bytes)
    iv = encrypted_data_bytes[:16]
    cipher_data = encrypted_data_bytes[16:]
    
    # Create AES cipher object and decrypt
    from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
    from cryptography.hazmat.backends import default_backend

    cipher = Cipher(algorithms.AES(key.encode()), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    
    # Decrypt the data
    decrypted_data = decryptor.update(cipher_data) + decryptor.finalize()

    # Return the decrypted data as a string
    return decrypted_data.decode('utf-8')

# Example of usage
if __name__ == "__main__":
    encrypted_data = "HAb89o3OWoajfpwW4SWjxzLAL7N46Yj0Bgxuj5MMKdBorCHsu_N3nFmGTpp7UxUe0JhHkYq2ef5tgKyt8Ua64A=="
    key = "AZkdUHsd73LLEAIBS97367DHAKXNZVAY"
    
    decrypted_data = decrypt_string(encrypted_data, key)
    if decrypted_data:
        print(f"Decrypted data: {decrypted_data}")
    else:
        print("Failed to decrypt data.")
